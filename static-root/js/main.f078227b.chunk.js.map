{"version":3,"sources":["tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","setlikes","userLike","setUserLike","actionDisplay","display","onClick","App","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f078227b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {loadTweets} from '../lookup'\n\nexport function TweetsComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempNewTweets = [...newTweets]\n        // Change this to a server side call\n        tempNewTweets.unshift({\n          content: newVal,\n          likes: 0,\n          id: 1234\n        })\n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n            <div className='col-12 mb-3'>\n                <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'></textarea>\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n            </div>\n            <TweetsList newTweets={newTweets} />\n      </div>\n}\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])  \n    useEffect(()=>{\n      const final = [...props.newTweets].concat(tweetsInit)\n      if (final.length !== tweets.length) {\n        setTweets(final)\n      }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n      const myCallback = (response, status) => {\n        if (status ===200){\n          setTweetsInit(response)        \n        } else {\n          alert(\"There was an error\")\n        }\n      }\n      loadTweets(myCallback)\n    }, [tweetsInit])\n    return tweets.map((item, index)=>{\n      return <Tweet tweet={item} className=\"my-5 py-5 border bg-white text-dark\" key={`${index}-{item.id}`}/>\n    })\n  }\n  \nexport function ActionBtn(props) {\n    const {tweet, action} = props\n    const [likes, setlikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    \n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like') {\n           if (userLike === true) {\n               setlikes(likes - 1)\n               setUserLike(false)\n           } else {\n               setlikes(likes + 1)\n               setUserLike(true)\n           }\n        }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n  }\n  \n  export function Tweet(props) {\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n       <p>{tweet.id}-{tweet.content}</p>\n       <div className='btn btn-group'>\n        <ActionBtn tweet={tweet} action={{type: \"like\", display: \"likes\"}} />\n        <ActionBtn tweet={tweet} action={{type: \"unlike\", display: \"unlike\"}} />\n        <ActionBtn tweet={tweet} action={{type: \"retweet\", display: \"Retweet\"}} />\n       </div>\n    </div>\n  }\n","export function loadTweets(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = 'http://127.0.0.1:8000/api/tweets/'\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function() {\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n      console.log(e)\n      callback({\"message\": \"This request was an error\"}, 400)\n    }\n    xhr.send()\n  }","import React from 'react';\nimport './App.css';\nimport {TweetsComponent} from './tweets'\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <TweetsComponent />\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl =  document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>,\n    appEl\n    );\n}\nconst tweetsEl = document.getElementById(\"tweets-me2\")\nif (tweetsEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <TweetsComponent />\n    </React.StrictMode>,\n  tweetsEl\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}